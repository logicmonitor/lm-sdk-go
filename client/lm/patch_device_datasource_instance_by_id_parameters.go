// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/logicmonitor/lm-sdk-go/models"
)

// NewPatchDeviceDatasourceInstanceByIDParams creates a new PatchDeviceDatasourceInstanceByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchDeviceDatasourceInstanceByIDParams() *PatchDeviceDatasourceInstanceByIDParams {
	return &PatchDeviceDatasourceInstanceByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchDeviceDatasourceInstanceByIDParamsWithTimeout creates a new PatchDeviceDatasourceInstanceByIDParams object
// with the ability to set a timeout on a request.
func NewPatchDeviceDatasourceInstanceByIDParamsWithTimeout(timeout time.Duration) *PatchDeviceDatasourceInstanceByIDParams {
	return &PatchDeviceDatasourceInstanceByIDParams{
		timeout: timeout,
	}
}

// NewPatchDeviceDatasourceInstanceByIDParamsWithContext creates a new PatchDeviceDatasourceInstanceByIDParams object
// with the ability to set a context for a request.
func NewPatchDeviceDatasourceInstanceByIDParamsWithContext(ctx context.Context) *PatchDeviceDatasourceInstanceByIDParams {
	return &PatchDeviceDatasourceInstanceByIDParams{
		Context: ctx,
	}
}

// NewPatchDeviceDatasourceInstanceByIDParamsWithHTTPClient creates a new PatchDeviceDatasourceInstanceByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchDeviceDatasourceInstanceByIDParamsWithHTTPClient(client *http.Client) *PatchDeviceDatasourceInstanceByIDParams {
	return &PatchDeviceDatasourceInstanceByIDParams{
		HTTPClient: client,
	}
}

/* PatchDeviceDatasourceInstanceByIDParams contains all the parameters to send to the API endpoint
   for the patch device datasource instance by Id operation.

   Typically these are written to a http.Request.
*/
type PatchDeviceDatasourceInstanceByIDParams struct {

	// PatchFields.
	PatchFields *string

	// UserAgent.
	//
	// Default: "Logicmonitor/SDK: Argus Dist-95bb3f4-dirty"
	UserAgent *string

	// Body.
	Body *models.DeviceDataSourceInstance

	// DeviceID.
	//
	// Format: int32
	DeviceID int32

	/* HdsID.

	   The device-datasource ID

	   Format: int32
	*/
	HdsID int32

	// ID.
	//
	// Format: int32
	ID int32

	// OpType.
	//
	// Default: "refresh"
	OpType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch device datasource instance by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchDeviceDatasourceInstanceByIDParams) WithDefaults() *PatchDeviceDatasourceInstanceByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch device datasource instance by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchDeviceDatasourceInstanceByIDParams) SetDefaults() {
	var (
		userAgentDefault = string("Logicmonitor/SDK: Argus Dist-95bb3f4-dirty")

		opTypeDefault = string("refresh")
	)

	val := PatchDeviceDatasourceInstanceByIDParams{
		UserAgent: &userAgentDefault,
		OpType:    &opTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithTimeout(timeout time.Duration) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithContext(ctx context.Context) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithHTTPClient(client *http.Client) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPatchFields adds the patchFields to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithPatchFields(patchFields *string) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetPatchFields(patchFields)
	return o
}

// SetPatchFields adds the patchFields to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetPatchFields(patchFields *string) {
	o.PatchFields = patchFields
}

// WithUserAgent adds the userAgent to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithUserAgent(userAgent *string) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetUserAgent(userAgent)
	return o
}

// SetUserAgent adds the userAgent to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetUserAgent(userAgent *string) {
	o.UserAgent = userAgent
}

// WithBody adds the body to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithBody(body *models.DeviceDataSourceInstance) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetBody(body *models.DeviceDataSourceInstance) {
	o.Body = body
}

// WithDeviceID adds the deviceID to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithDeviceID(deviceID int32) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetDeviceID(deviceID int32) {
	o.DeviceID = deviceID
}

// WithHdsID adds the hdsID to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithHdsID(hdsID int32) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetHdsID(hdsID)
	return o
}

// SetHdsID adds the hdsId to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetHdsID(hdsID int32) {
	o.HdsID = hdsID
}

// WithID adds the id to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithID(id int32) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetID(id int32) {
	o.ID = id
}

// WithOpType adds the opType to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) WithOpType(opType *string) *PatchDeviceDatasourceInstanceByIDParams {
	o.SetOpType(opType)
	return o
}

// SetOpType adds the opType to the patch device datasource instance by Id params
func (o *PatchDeviceDatasourceInstanceByIDParams) SetOpType(opType *string) {
	o.OpType = opType
}

// WriteToRequest writes these params to a swagger request
func (o *PatchDeviceDatasourceInstanceByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PatchFields != nil {

		// query param PatchFields
		var qrPatchFields string

		if o.PatchFields != nil {
			qrPatchFields = *o.PatchFields
		}
		qPatchFields := qrPatchFields
		if qPatchFields != "" {

			if err := r.SetQueryParam("PatchFields", qPatchFields); err != nil {
				return err
			}
		}
	}

	if o.UserAgent != nil {

		// header param User-Agent
		if err := r.SetHeaderParam("User-Agent", *o.UserAgent); err != nil {
			return err
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param deviceId
	if err := r.SetPathParam("deviceId", swag.FormatInt32(o.DeviceID)); err != nil {
		return err
	}

	// path param hdsId
	if err := r.SetPathParam("hdsId", swag.FormatInt32(o.HdsID)); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.OpType != nil {

		// query param opType
		var qrOpType string

		if o.OpType != nil {
			qrOpType = *o.OpType
		}
		qOpType := qrOpType
		if qOpType != "" {

			if err := r.SetQueryParam("opType", qOpType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
