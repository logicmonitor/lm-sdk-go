// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/logicmonitor/lm-sdk-go/models"
)

// NewPatchDeviceDatasourceInstanceAlertSettingByIDParams creates a new PatchDeviceDatasourceInstanceAlertSettingByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchDeviceDatasourceInstanceAlertSettingByIDParams() *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	return &PatchDeviceDatasourceInstanceAlertSettingByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchDeviceDatasourceInstanceAlertSettingByIDParamsWithTimeout creates a new PatchDeviceDatasourceInstanceAlertSettingByIDParams object
// with the ability to set a timeout on a request.
func NewPatchDeviceDatasourceInstanceAlertSettingByIDParamsWithTimeout(timeout time.Duration) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	return &PatchDeviceDatasourceInstanceAlertSettingByIDParams{
		timeout: timeout,
	}
}

// NewPatchDeviceDatasourceInstanceAlertSettingByIDParamsWithContext creates a new PatchDeviceDatasourceInstanceAlertSettingByIDParams object
// with the ability to set a context for a request.
func NewPatchDeviceDatasourceInstanceAlertSettingByIDParamsWithContext(ctx context.Context) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	return &PatchDeviceDatasourceInstanceAlertSettingByIDParams{
		Context: ctx,
	}
}

// NewPatchDeviceDatasourceInstanceAlertSettingByIDParamsWithHTTPClient creates a new PatchDeviceDatasourceInstanceAlertSettingByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchDeviceDatasourceInstanceAlertSettingByIDParamsWithHTTPClient(client *http.Client) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	return &PatchDeviceDatasourceInstanceAlertSettingByIDParams{
		HTTPClient: client,
	}
}

/* PatchDeviceDatasourceInstanceAlertSettingByIDParams contains all the parameters to send to the API endpoint
   for the patch device datasource instance alert setting by Id operation.

   Typically these are written to a http.Request.
*/
type PatchDeviceDatasourceInstanceAlertSettingByIDParams struct {

	// PatchFields.
	PatchFields *string

	// UserAgent.
	//
	// Default: "Logicmonitor/SDK: Argus Dist-95bb3f4-dirty"
	UserAgent *string

	// Body.
	Body *models.DeviceDataSourceInstanceAlertSetting

	// DeviceID.
	//
	// Format: int32
	DeviceID int32

	/* HdsID.

	   Device-DataSource ID

	   Format: int32
	*/
	HdsID int32

	// ID.
	//
	// Format: int32
	ID int32

	// InstanceID.
	//
	// Format: int32
	InstanceID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch device datasource instance alert setting by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithDefaults() *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch device datasource instance alert setting by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetDefaults() {
	var (
		userAgentDefault = string("Logicmonitor/SDK: Argus Dist-95bb3f4-dirty")
	)

	val := PatchDeviceDatasourceInstanceAlertSettingByIDParams{
		UserAgent: &userAgentDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithTimeout(timeout time.Duration) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithContext(ctx context.Context) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithHTTPClient(client *http.Client) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPatchFields adds the patchFields to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithPatchFields(patchFields *string) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetPatchFields(patchFields)
	return o
}

// SetPatchFields adds the patchFields to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetPatchFields(patchFields *string) {
	o.PatchFields = patchFields
}

// WithUserAgent adds the userAgent to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithUserAgent(userAgent *string) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetUserAgent(userAgent)
	return o
}

// SetUserAgent adds the userAgent to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetUserAgent(userAgent *string) {
	o.UserAgent = userAgent
}

// WithBody adds the body to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithBody(body *models.DeviceDataSourceInstanceAlertSetting) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetBody(body *models.DeviceDataSourceInstanceAlertSetting) {
	o.Body = body
}

// WithDeviceID adds the deviceID to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithDeviceID(deviceID int32) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetDeviceID(deviceID int32) {
	o.DeviceID = deviceID
}

// WithHdsID adds the hdsID to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithHdsID(hdsID int32) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetHdsID(hdsID)
	return o
}

// SetHdsID adds the hdsId to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetHdsID(hdsID int32) {
	o.HdsID = hdsID
}

// WithID adds the id to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithID(id int32) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetID(id int32) {
	o.ID = id
}

// WithInstanceID adds the instanceID to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WithInstanceID(instanceID int32) *PatchDeviceDatasourceInstanceAlertSettingByIDParams {
	o.SetInstanceID(instanceID)
	return o
}

// SetInstanceID adds the instanceId to the patch device datasource instance alert setting by Id params
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) SetInstanceID(instanceID int32) {
	o.InstanceID = instanceID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchDeviceDatasourceInstanceAlertSettingByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PatchFields != nil {

		// query param PatchFields
		var qrPatchFields string

		if o.PatchFields != nil {
			qrPatchFields = *o.PatchFields
		}
		qPatchFields := qrPatchFields
		if qPatchFields != "" {

			if err := r.SetQueryParam("PatchFields", qPatchFields); err != nil {
				return err
			}
		}
	}

	if o.UserAgent != nil {

		// header param User-Agent
		if err := r.SetHeaderParam("User-Agent", *o.UserAgent); err != nil {
			return err
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param deviceId
	if err := r.SetPathParam("deviceId", swag.FormatInt32(o.DeviceID)); err != nil {
		return err
	}

	// path param hdsId
	if err := r.SetPathParam("hdsId", swag.FormatInt32(o.HdsID)); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	// path param instanceId
	if err := r.SetPathParam("instanceId", swag.FormatInt32(o.InstanceID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
